Charles David Stersic
Candice Allen
C868: Software Development Capstone
October 4, 2020
 Software Development Capstone Documentation: Task 2 project report
Requirements A: Comprehensive Project Management and Development Description 
The project proposal process
CD Kayaks' project goals and justification
project goal
	Create a digital inventory management system for their rental inventory. The inventory management system software must be installable on the company’s android mobile phone. The software a database for product information that can be update the product’s detail as inventory changes. Rental products can be tracked by rental status, and product will show the customer that has the reservation or checked out product.
justification
 	CD Kayaks has an analog inventory system for all the rental kayaks currently. The current inventory is only for the total number of kayaks that CD Kayaks has set specifically for the rental service. CD Kayaks needs an inventory system that updates the rental status that is available, reserved, and checked out. The current inventory file system is designed to record rental status and would not be a real time solution. CD Kayaks has tried a paper list of available rental products, but with multiple employees taking reservations, customer changing reservations, and customers reserving multiple kayaks in a single order. The paper list has problems when employees get busy which leads to orders not being record accurately or at all. The inventory will need to be audited very often to maintain accuracy of the rental status document. The more complex orders can be difficult to ensure that all products are available and without physically check the rental product warehouse. CD Kayaks reservation made the previous day are moved from warehouse to pick up area before the business open the next day. The rental service is mostly used by repeat customers. Any reservations that cannot be fulfilled will create an extremely upset customer that cannot be fixed on the spot possibly losing customers and the company will be seen as unreliable, unable to trust service, and create negative perception of the company. The company will rent all the products in inventory often. Inaccuracies will cause the customer base loses faith in the company’s ability to provided service that cannot be repaired and will affect the whole company. The project’s main goal is to make the product inventory management system is accuracy. The inventory management system that is mobile will best fit the rental service.  
project goal
	The software will need be a login id to protect the company data from unauthorized users. The project will need to store a list of authorized users. The project will need have two user types that will have different security authorization. The user type will be either employee or customer that will determine the functions the user can access.  
justification
	CD Kayaks’ project will have information that customers should not be accessing and accesses to the data should be protected from authorized individuals. The software will contain customer and product data that CD Kayaks is ethical required to keep safe. The project will need to authorization check from security. The project will be used by employees will require an employee user to update the rental products and the customer list. The customer username will be used by the employee to reserve rental products requested by the customer. The software’s separation of functions will allow all customer reservation activity to be protected by customer username which will be an individualized unique access. The customer accounts will be limited by the software to rental services that are currently available by checking the latest inventory data. CD Kayaks will need the customer accounts to prevent creating reservations that cannot be fulfilled.
project goal
	The software will need to look professional. The software will need to be designed for low knowledge users. The design must not include any unnecessary or duplicate components. The software must be installable on various mobile platforms 
justification
	CD Kayaks employs mostly seasonal workers and offers various services to customers aside from kayak rentals. The project will be loaded onto the company mobile phone, but the design should be for multiple types of android devices. The company will eventually need the software on a different device having the layout designed for multiple devices will increase the lifespan of the project. The software will need to be simple to learn and easy for users to complete tasks. The design will need to be streamlined without extras that would not be essential for functional and that could be confusing to user’s unfamiliar to the software. This will decrease the amount of training the employee will need on the software. The software being simple enough to use without detail instructions will decrease the need for manager assistance. 
project goal
	The software can modify customer data. The customer data must be only updated by authorized users. The customer data must have a unique username and email address. The customer data can be created, modified, and deleted. 
justification
	CD Kayaks will need to include a way to update customer data records. The customer data will be used to access to make customer user credentials. The customer accounts will use customer name data as authorization and each account must have a unique identifier. CD Kayaks will need the customer accounts distinct to protect accuracy of reservation records. The customer data will include email address to contact users. CD Kayaks does not have a method for collecting customer contact information and could be used to benefit the business. The software will only provide customer data to authorized employee users. The employee user will be able to view existing, create new, modify, and delete customer records. This will give the employee user a way to lookup customer credentials, view customer data, and update customer records. The employee will need access to customer records during the rental reservation process. The company will get better customer records and a process to create customer login credentials. 
project goal
	The software will contain an inventory management system. The inventory management system will view existing, create new, modify, and delete rental product data. The product data will include name, date, reservation status, and created by. 
justification
	CD Kayaks’ current paper file for reservation status is static and separating into rental status line by line process. The software will provide functions to create new, modify, and delete products that include name, date, reservation status, and created by product data. The inventory will be recorded in a mobile database that will be updated for each rental reservation status change. CD Kayaks wants to have a way to ensure rental requests are available during the rental process. CD Kayak wanted a way to view the rental status groups for management purposes and a tool to assist with inventory audits.

The high-level deliverables
* The application is installed and fully functioning on the companies’ mobile phone. The software source code and documentation of the project with instructions for use.
* The application launches into a login activity that will check login credentials with two types of valid users and the ability to update the user email address.
* The customer account must be able to complete the following tasks: view a list of the available rental kayaks, change the type of kayaks the list of available kayaks displays, can reserve any available kayak, customer can view a list of reserved kayaks, can change reserved kayak to available, and ability to sign out. 
* The employee account must be able to complete the following tasks: view a list of all rental kayaks, sort list by rental status, have a list that displays the kayak's description, can add new products to the database, can modify kayak detail data, can delete products from the database, new products added to the database with a timestamp, and ability to sign out.

The reason for the project
	CD Kayaks started as a sporting goods retailer that has expanded into kayak rentals. The kayaks rental service is only available from 6 a.m. to 11 a.m. and includes all basic equipment. The rental kayaks for a period of a day or multiple days. A large portion of their customer were kayak tour guides. The guides were all arriving at the opening renting multiple kayaks with specific color, type, and size. CD Kayaks changed to all rentals must be reserved the night before and the reservation would be ready in the morning. CD Kayaks removed the bottleneck by setup new business tasks in the form of the reservation process and inventory management which increased the labor costs. CD Kayaks had been exploring options during the winter to simplify the process to decrease labor costs, develop a customer database for marketing, and increase rental satisfaction by speeding up the rental process. CD Kayaks evaluated proposed projects using various decision models. Contracting a software development firm to the simple application would have a longer payback period than most proposed projects, but with fewer associated risks. 

High-Level Scope
	The project manager scheduled a meeting with CD Kayaks to clarify the problems the software is attempting to solve and the requirements of the project. The meeting yielded a refined project request and CD Kayaks project requirements list:
? The software needs to be designed for android mobile (and work with the current company phone).
? The software needs to be an inventory management system for their kayak rental service.
? The database will need to have two tables. A customer table that records customer name (only A-Z/a-z) and customer email (only accepts email format). A product table that records product name(a-z), date product was created, product type, the identity of the user that created the product, product rental status, and identity of the user that reserved the product.
? The software will certify the user's login credentials.
? The software will have simple design with intuitive layout.
? The software will have customer login access to view available rentals.
? The software will have customer accounts that can update their email address.
? The software will have customer accounts can reserve/release rental kayaks.
? The software will have customer accounts with a way to view reserved kayaks.
? The software will have employee accounts with full access to the rental inventory management system with a user interface designed for simplicity.
? The software will have employee accounts with a rental products list that can filter the list by rental status.
? The software will have employee accounts that can create new, update, delete, and view all customer records

Project Objectives
* The project objectives include an overall deadline were the project software development process is goal is three months, but if the project goes over four months the contract will be a financial loss. The project has been allocated with enough resources and three months goals is equitable. The project has not fully defined deliverables and resource required. The project objectives are based on the project request document and meeting CD Kayaks to clarify the project goals. All the listed objectives can be measured to test for accuracy or specific acceptance criteria: 
* The software needs to be designed for android mobile (and work with the current company phone).
* The software needs to be an inventory management system for their kayak rental service.
* The database will need to have two tables. A customer table that records customer name (only A-Z/a-z, no blank space) and customer email (only accepts email format). A product table that records product name(A-Z, a-z, 0-9, and blank space allow), date product was created, product type, identity of user that created product, product rental status, and identity of user that reserved the product.
* The software will certify the user's login credentials.
* The software will have simple design with intuitive layout.
* The software will have customer login access to view available rentals.
* The software will have customer accounts that can update their email address.
* The software will have customer accounts can reserve/release rental kayaks.
* The software will have customer accounts with a way to view reserved kayaks.
* The software will have employee accounts with full access to the rental inventory management system with a user interface designed for simplicity.
* The software will have employee accounts with a rental products list that can filter the list by rental status.
* The software will have employee accounts that can create new, update, delete, and view all customer records

Project Description
	The final product of CD Kayaks project will be application that will run on android device provided. The application will use SQLite database to store CD Kayaks complete inventory for their rental kayak. The database will store a user data with the employee and a customer login. The application will start with a login activity and a field to enter email if the user needs to update that information. The user name field will only accept characters (a-z/A-Z), email address field will be checked for the correct format after clicking submit button, and will see if the user is authorized to access the program. If an exception is found on entered data on the login activity. The activity will display a toast message that explains what exception was detected. The application will check the user access type if no exception was detected. 
	The user type is set as either employee or customer and the type will determine to the activity opened after login. The employee user type will have an launch an activity that displays a complete list products from the database, three buttons that filter product view by rental status, a button that will add product details to the list, a button to store new product data in database, a button that returns to the log in activity, a button to access the activity that can view and change customer data, and list product can be selected to launch activity that can modify product database entries. 
	The employee user will be able to access the list of user data. The activity will show all saved users with customer type in a list. The user information can be edited by touching the list item. The user data will be displayed in the text fields in the customer edit activity that then can be updated by touching the save button or by touching the cancel button the user will return to customer data activity. The new button will open a dialog message with two fields for creating new user data by touching the create button or touch the cancel button close the dialog. The log off button will open the login activity. The kayak button will open the previous activity. The application has more activities but can only be accessed with a customer user login. 
	The customer user login will launch the customer main activity. The customer will be able to view all products with rental status of available. The list can be altered with all available button will display all available product, the sit in button will display available product with sit in type and sit on button will display available product with sit on type. The log out button will launch the login activity. Touching a list item will launch customer reservation activity and updating item selected to be reserved for the customer user. 
	The customer reservation activity has a list of products reserved by the customer user. Touching an item will update the product to by available and launch the customer activity. The view products button will launch the customer activity. The log off button will launch the login activity. The customer users’ available actions have been fully described and that is the entire project description. 
	The development team will divide the project into four deliverables. The software development methodology will be waterfall throughout the planning and design phase. The project has many requirements that maybe difficult to accommodate as requested. The project sponsor wanted a thoroughly defined scope to research constraints and provide a better resource estimate. The project is desired to be simple to learn, dense with functionality, and completely inflexible on total cost. The project manager will need to be flexible to ensure to satisfactory conclusion. The scope statement will take time away from the development and testing time. The project manager will move to agile model if scope statement is approved to meet with budget expectations. 
	The project manager will focus on completing current deliverable. The team will include project manager, a design specialist, and three team members that are trained to develop and test the project. The whole team will be part of the planning and design phase. The initial meetings will work like a waterfall methodology by detailing all the deliverables, tasks, and diagramming the structure. The development phase will change the methodology to agile allowing the team member without a task can start on the next deliverable’s development tasks or start on the testing phase. The testing phases must be extensive to ensure the inventory accuracy and data requirements to meet the acceptance criteria. 

Key Deliverables and Tasks
Deliverable 1: estimated completion is 185 hours
	The deliverable will include all XML files, java activity files, and all associated XML components. The team will need to fully design all the XML files that are associated with an activity and XML files that will be used for the recycler view with all the components. The project manager requested the XML files all use lite blue background and constraint layout. wanted on all the XML files. The java activity files will need to be designed to change intent and be linked with XML components. The java files need to be a completed as documented in the design phase of the agile model. The java files will be tasks will be discussed from each file. The tasks are divided into files created, design layout testing, and testing phase.
Task 1.1: estimated completion is 3 hours
	The activity main XML will need a title setup that can remain throughout all the activities. The main XML file will have a text view next to edit text field for username and place for user input. A button component under the username that will be read submit. The final components nest under the button will be text view next to edit text field for email address and user input of an email address. 
Task 1.2: estimated completion is 3 hours
	The activity employee main XML will have many components that will create reports, change activities, display label, fields to create new products, and recycler view for rental products. The first components are two text views one for the title and a label for product name. The product name is next to edit text component, two radio buttons that are can only have one selected within a radio group, and a save button. Two buttons components are below the save button. The two buttons work as navigation for access the customer data and for returning to the main activity. The screen will have four small buttons below navigation that will change products view in the recycle view. The buttons filter the list by the three rental status and the last one will add the product details to the list. The last component is at the bottom of the screen and is the recycle view. 
Task 1.3: estimated completion is 3 hours
	The activity employee product modify XML file will be from display product detail and having options to update or remove the product. The first line of components is a text view used as a labeled Product Name that is will be displayed to the left of an edit text component that will be left blank. The next line has two text views components the first one will be labeled created by and next one will be on the right with a label of textview which is just a place holder. The next line is two text view the left one is labeled date created and the other is a place holder. The next lines components are a group of two radio buttons with horizontal alignment and radio buttons are labeled sit in and sit on top, respectively. The next line of components is a group of three radio buttons with horizontal alignment and the radios buttons are labeled available, reserved, and checked out, respectively. The last line of components is three buttons labeled save, delete, and cancel.
Task 1.4: estimated completion is 3 hours
	The activity employee user XML file will be for viewing the current customers and changing the customer data. The first line of components is two buttons that are for navigation and are label log off and products. The next line is horizontal divider. The next line of components is a text view labeled username and edit text box that is left blank. The next line of components is a text view labeled email address and edit text that is left blank. The following line is a horizontal divider. The next line is two buttons labeled add customer and clear. The last component is a recycler view. 
Task 1.5: estimated completion is 3 hours
	The activity employee user edit XML file will be for editing customer records by selecting from recycler view in employee user main activity. The first line of components starts with a text view labeled username next to a blank edit text box. The next line has a text view labeled email address next to a blank edit text box. The last line is two buttons labeled save and cancel. 
Task 1.6: estimated completion is 3 hours
	The activity customer main XML file will provide access to a list of available rental products and ability to reserve kayaks. The first line of components starts with two buttons for navigation that are labeled cart and log out. The next line is a text view used as a title and to inform the customer's that is labeled kayak's available for reservation. The next line has three button that will filter the results display in the recycler view. The three buttons are labeled all available, sit in, and sit on top. The last time of components is recycler view. 
Task 1.7: estimated completion is 3 hours
	The activity customer reservation XML file will provide the customer a way to view reserved product and to remove the reservation. The first line of components is two buttons labeled view products and log off that are used as navigation. The next line of components is a text view used as an informative title that is labeled kayaks that have been reserved. The last component is a recycler view that will hold reserved products. 
Task 1.8: estimated completion is 3 hours
	The three XML files are used to by the recycler view to make a line a product or customer data. The first recycler XML file is for the customer user list which has a relative layout and two text views lined up horizontally. The first text view is labeled username and the second is email address. The product list XML file has a relative layout with one centered text view labeled individual kayak. The product detailed list will offer more information within the recycler view using a relative layout with three text views in a line and labeled kayak name, kayak type, and kayak reserved. 
Task 1.9: estimated completion is 3 hours
	The main java activity will need to have code that will allow the executable application to navigate. The first is setup to has the button and edit text variables declared. Within the onCreate function the three declared variables will need to be linked with XML components as labeled. The submit button will need a click listener function within onCreate. The file will need to have a function that will check email addresses are entered in the correct format. If the format is incorrect the application will send a toast message to help the user. A function is needed to check username format which can only be a-z/A-Z with no spaces. The username input will be checked as entered and the email address will be checked on click of the submit button. 
Task 1.10: estimated completion is 3 hours
	The employee main java activity will need to declare all seven buttons, an edit text field, two radio buttons, and a radio group. The declared variables will need to associate with the XML components as labeled within the onCreate function. The radio group will need to setup a listener for the radio button being selected. The buttons will all need click listeners setup within the onCreate function. The edit text for the product name must have a function to check the format as input which can only by a-z, A-Z, 0-9, and blank space. The incorrect product name format will clear edit text and display a toast message. The product save button's on click listener will check that the product name enter is not blank and display a toast if blank. The product customer button's on click listener will change intent to launch employ user activity. The log out button's on click listener will change intent to launch main activity. 
Task 1.11: estimated completion is 1 hour
	The employee product edit activity will need to declare three buttons, an edit text field, five radio buttons, and two radio groups. The declared variables will need to associate with the XML components as labeled within the onCreate function. The radio groups will both need to setup a listener for the radio button being selected within their group. The buttons will all need click listeners setup within the onCreate function. The edit text for the product name must have a function to check the format as input which can only be a-z, A-Z, 0-9, and blank space. The incorrect product name format will clear edit text and display a toast message. The product save button's on click listener will change intent to launch employee main activity. The product delete button's on click listener will change intent to launch employee main activity. The product cancel button's on click listener will change intent to launch employee main activity.
Task 1.12: estimated completion is 1 hour
	The employee user activity will need to declare four buttons and two edit text fields. The declared variables will need to associate with the XML components as labeled within the onCreate function. The edit text for username must have a function to check the format as input which can be a combination of a-z or A-Z, and no blank spaces. The incorrect username format will clear edit text and display a toast message. The log off button's on click listener will change intent to launch main activity. The product button's on click listener will change intent to launch employee main activity. The clear button's on click listener will remove input from the edit text fields. The new customer button's on click listener will change intent to launch employee user activity only if customer name field has data input. The activity will need a function to check email address format and display toast message if invalid format.
Task 1.13: estimated completion is 1 hour
	The employee user edit activity will need to declare two buttons and two edit text fields. The declared variables will need to associate with the XML components as labeled within the onCreate function.  The edit text for username must have a function to check the format as input which can only be a-z or A-Z and no blank spaces. The incorrect username format will clear edit text and display a toast message. The save button's on click listener will change intent to launch employee user activity if username field has data input and will display a toast message when left blank. The cancel button's on click listener will change intent to launch employee user activity. The activity will need a function to check email address format and display toast message if invalid format.
Task 1.14: estimated completion is 1 hour
	The customer activity will need to declare five buttons. The declared variables will need to associate with the XML components as labeled within the onCreate function. The buttons will all need on click listeners. The customer cart button's on click listener will change intent to launch customer reservation activity. The log off button's on click listener will change intent to launch main activity.
Task 1.15: estimated completion is 1 hour
	The customer reservation activity will need to declare two buttons. The declared variables will need to associate with the XML components as labeled within the onCreate function. The buttons will all need on click listeners. The exit button's on click listener will change intent to launch customer activity. The log off button's on click listener will change intent to launch main activity. 
Task 1.16: estimated completion is 34 hours
	The design specialist team member will use the remaining time on the project team to make the layout’s presentation as professional and easy to under. The design specialist will need to test the compatibility with CD Kayaks device and test other devices if time allows. 
Task 1.17: estimated completion is 120 hours
	The deliverable will test all newly created file in the first deliverable’s tasks and if the project does not meet expectation to adjust the source code by submitted a change request is submitted. The application must be able to launch. The XML design needs to look professional, simple, and uniform. The testing team will be using tools to check to all activities are responding to commands as expect on the desired device and emulated devices. The user and product names edit text fields working constraints. The deliverable is completed when the tests all return expected values for acceptance criteria.
Deliverable 2: estimated completion is 479 hours
	The deliverable will include designing the database that will store company data including creation of SQLite database, the java functions, and creating the database with a table for user data and a table for product data. The team will need to build the java files for creating the database helper to connect to SQLite, a product table for the database, a user table for database, a product item that will extend to the main application, a user item that will extend to the main application, a product data source to connect the product item to the product table, and a user data source to connect the user item to the product table. The tasks will be divided into java files and the testing process. 
Task 2.1: estimated completion is 28 hours
	The data base helper java file will define the database name and version number. The file will create two tables for the database and provide upgrade method by deleting existing tables to be replaced by the updated data. The file will need a function to give access to data base helper.
Task 2.2: estimated completion is 35 hours
	The product model table java file will declare variables for the product table and columns associated, a variable for all columns in a list, a variable string to create table, and a variable string to drop table. The product table has seven columns that will need to be described with SQLite types. The product id column's types are integer, primary key, and autoincrement. The product name column's type is text. The product date column's type is text. The product type column's type is integer. The product user created column's type is text. The product reserved column's type is integer. The product user reservation column's type is integer. 
Task 2.3 estimated completion is 35 hours
	The user model table java file will declare variables for the user table and columns associated, a variable for all column in a list, a variable string to create table, and a variable string to drop table. The user table has four columns that will need to be described with SQLite types. The user id column's types are integer, primary key, and autoincrement. The username column's type is text. The user access column's type is integer. The user email column's type is text. 
Task 2.4: estimated completion is 35 hours
	The product item java file needs to declare variables for each column in the product table which includes integer for id, string for name, string for date, integer for type, string for product created by, integer product reserved, and integer for product user reservation. The file will need the following functions generated for all variables which include the constructor, the getter, the setter, and to string. The main class will implement parcelable which will need the following functions built: A function that puts table columns into content values, a write to parcel function, a product item parcel for each column, and a creator function for creating a product item array list from a parcel and making a product item array list. 
Task 2.5: estimated completion is 35 hours
	The user item java file needs to declare variables for each column in the product table which includes an integer for id, a string for name, an integer for access, and a string for email. The file will need the following functions generated for all variables which include the constructor, the getter, the setter, and to a string. The main class will implement parcelable which will need the following functions built: A function that puts table columns into content values, a write to parcel function, a user item parcel for each column, and a creator function for creating a user item array list from a parcel and making a user item array list 
Task 2.6: estimated completion is 60 hours
	The data source product java file will access the database to complete all requests by the application for product table data. The file will need context, SQLite database, SQLite open helper, and a string list of all columns. A constructor for getting the writable database. The remaining functions needed to access product data are as follows: open to get writable database, close to end database request, create product to add new entry in the product table, product update for changing existing product data, product reservation for customer requests to reserve or release products, delete product to completely remove product from database, a list of product items for all products in the database, a list of product items for all products reserved for a specific customer in the database, a list of product items for all products reserved in the database, a list of product items for all products checked out in the database, a list of all product items for products available in the database, a list of all product items for products that are available and the type "sit on" in the database, a list of all product items for product that are available and the type "sit in" in the database, and a product item that was built from a cursor. 
Task 2.7: estimated completion is 60 hours
	The data source user java file will access the database to complete all requests by the application for user table data. The file will need context, SQLite database, SQLite open helper, and a string list of all columns. A constructor for getting the writable database. The remaining functions needed to access user data are as follows: open to get writeable database, close to end database request, delete all users to remove all user table entries, create employee to add user with employee type to the database, create customer to add user with customer type to the database, get all toast to display to user data in toast message the first time the application is launched, add new customer will add new entry to user table data, update customer will update user data entry to database, update customer name will update user name data only to database, user database update email will update user email data only to database, test unique customer will prevent repeat user names in the user table,  get all customer user data will get an array list of all user items with type of customer, get authorized user data will check user table for specific user name and return all that user's data, cursor to user will receive a cursor and return user item, and get user items count gets all entries in the user table. 
Task 2.8: estimated completion is 216 hours
	The deliverable will all database java file created in the second deliverable’s tasks if the project does not meet expectation a change request is submitted. The application will test all the functions of the data source product and data source user with programmer created tools. The SQLite database tests will examine each data source function. The function will be tested can only be approved if input data matches expected data. The deliverable is completed when the tests all return expected values for acceptance criteria.
Deliverable 3: estimated completion is 100 hours
	The deliverable will give the activities access to database, updating click listeners, and supporting functions. The development team will need to connect activities to database access, passing log in data between activities, setting on click listeners, creating a timestamp for date products are created, and setting user entries on application launch. The development team will be working on main activity, employee activity, employee product edit activity, employee user activity, employee user edit activity, customer activity, and customer reservation activity. The tasks are divided into each file that needs to be updated and testing process.
Task 3.1: estimated completion is 4 hours
	The main activity java file will need to declare variables for data source user and SQLite database these will all be used to access database. The file will declare four keys one for each column of user table. This will be for storing user log in information between activities. The database must call database helper first in onCreate. The user table needs to have at least two entries with different types. The main activity will check user table and add default data users if needed. The submit button's on click listener will need to complete the following actions: user name edit text matches user table entry data, check email edit text for user input, if email is entered check email format, update email approved to user name, return all user data for correctly matched user name, check user type data, create extension for user data to next activity, and open activity that matches user type. 
Task 3.2: estimated completion is 4 hours
	The employee activity java file will need function to get current date and return date string. The file will need to declare data source product, user item, and list of product items. The file will declare five keys one for each column of user table and fifth to add security to type access. The user key information passed from the last activity must be set as final to variables. The key is set to a new user item. The save button's on click listener will need to complete the following actions: check if product name edit text has user input, if product name is blank display toast message, get product name from edit text, get date from current date function, get type integer from radio button, get created by from current user, set all product information to new product item, set reserved to available, set user reservation to zero, and using data source product create a new product from product item data. The customer data button's on click listener needs to set user data to extend to employee user activity. 
Task 3.3: estimated completion is 4 hours
	The employee product edit java file will need to declare data source product, product item, and user item. The file will need to declare eleven keys one for each column of user table and one for each column of product table. The key data passed from last activity must be set as final to variables. The eleven passed are set to a user item and a product item. The product item's name is set to edit text field. The product item's created by name is set to text view for created by data. The product item's date is set to text view for date data. The product item's type is set to appropriate radio button. The product item's reservation status is set to appropriate radio button. The save button's on click listener will need to complete the following actions: check if edit text product name is blank, if blank send a toast message, create new product item, set product id from key to new product item, set product name to new product item, set type radio id to new product item, set reservation status radio id to new product item, open data source product, call product update with new product item, and sets user key data to extend to employee activity. The delete button’s on click listener opens data source product, calls delete product with product id key, and sets user key data to extend to employee activity. The cancel button's on click listener sets user key data to extend to employee activity. 
Task 3.4: estimated completion is 4 hours
	The employee user java file will need to declare data source user and user item. The file will need five user keys. The key data was passed from the last activity must be set as final variables. The key variable will be set to new user item. The new customer button's on click listener will need to complete the following actions: check the edit text user name is blank, send a toast message if blank, check if the edit text user name data matches any user name in the user table, send toast message if the name matches, check the edit text email with email test function, if email format is incorrect a toast message is sent, if passed all test a new user item is created with edit text name and edit text email data, open data source user, calls add new customer with new user item, sets user key data to extend to employee user activity.
Task 3.5: estimated completion is 4 hours
	The employee user edit activity java file will need to declare data source user and user item. The file will need to declare ten keys for data passed from the last activity. The first five keys are for the current user's data. The last five keys are customer data the employee requested to change. The keys are set as final variables and passed into two new user items within the onCreate function. The customer key data is set to edit text customer name and edit text email. The save button's on click listener will need to complete the following actions: check the edit text customer name is blank, send a toast message if blank, check if the edit text user name data matches any user name in the user table, send a toast message if the name matches, create new user item, set new user item id to customer id key, set new user item name to edit text customer name, set new user item email to edit text email, check if email is valid, open data source user and call update customer with new user item if email is valid, open data source and call update customer name with new user item if email is invalid, and set user key data to extend to employee user activity. The cancel button's on click listener sets user key data to extend to employee user activity.
Task 3.6: estimated completion is 4 hours
	The customer activity java file will need to declare data source product and user item. The file will need to declare five user keys from the last activity.  The keys are set as final variables and passed into a new user item within the onCreate function. The customer cart button's on click listener sets user key data to extend to customer reservation activity. 
Task 3.7: estimated completion is 4 hours
	The customer reservation activity java file will need to declare data source product, user item, and product item. The file will receive passed key data from the previous activity. The five keys are for the current user's data. The keys are set as final variables and passed into a new user item within the onCreate function. The exit button's on click listener sets user key data to extend to customer activity. 
Task 3.8: estimated completion is 72 hours
	The deliverable will need to be tested against the acceptance criteria if a test fails to meet expectations a change request must be submitted. The application will need to test all buttons connected to the database, checking database queries for accuracy, and testing the data recorded versus expected. All functions that access the database to save, modify, and delete must be working as expected. The timestamp added to every product on creation must be tested in various conditions. The edit text fields need the constraints tested to prevent any blank names and username duplicates being stored in the database.  The test task will end when all acceptance criteria is meet.
Deliverable 4: estimated completion is 240 hours
	The deliverable will include the creation the five java files that adapt recycler views and update the activities within recycler views to receive recycler data. The sponsor requested a change request for customer and employee user to have an activity that will let the user email the administration. The development team will need to make a recycler view adapter for each activity with a recycler view. The team will need to make an extra adapter to allow employee to view product details in the recycler view. The team will need to update all the activities with recycler views. The change requested will require the creation of another activity which will include a new java file, a new XML file, and will need to add access points to change request. The tasks will be divided into files that require code changes and the testing process.
Task 4.1: estimated completion is 24 hours
	The product employee activity adapter java file will need to extend to recycler view adapter. The file needs to declare final keys for all the product table columns and current user data. The file needs to declare user item, product item, a list of product items, context, data source product. The constructor will use all the last declared variables. The file will need functions for view holder, onCreate view holder, and on bind view holder. The function onCreate needs inflater for list product XML file. The function view holder sets one column (product name) on the recycler view in activity employee XML file. The function on bind view holder will set click listener that will set product key to extend to employee product edit activity. 
Task 4.2: estimated completion is 24 hours
	The product detail employee activity adapter java file will need to extend to recycler view adapter. The file needs to declare final keys for all the product table columns and current user data. The file needs to declare user item, a list of product items, context, data source product. The constructor will use all the last declared variables. The file will need functions for view holder, onCreate view holder, and on bind view holder. The function onCreate needs inflater for list detail product XML file. The function view holder sets three columns (product name, product type, and product reservation status) on the recycler view in activity employee XML file. The function on bind view holder will set click listener that will set product key to extend to employee product edit activity.
Task 4.3: estimated completion is 24 hours
	The modify user activity adapter java file will need to extend to recycler view adapter. The file needs to declare final keys for current user data and for customer user data. The file needs to declare user item, a list of user items, and context. The constructor will use all the last declared variables. The file will need functions for view holder, onCreate view holder, and on bind view holder. The function onCreate needs inflater for list customer user XML file. The function view holder sets one column (username) on the recycler view in activity employee user XML file. The function on bind view holder will set click listener that will set customer key to extend to employee user edit activity. 
Task 4.4: estimated completion is 24 hours
	The product customer activity adapter java file will need to extend to the recycler view adapter. The file needs to declare final keys for customer user data. The file needs to declare user item, product item, a list of product items, and context. The constructor will use all the last declared variables. The file will need functions for view holder, onCreate view holder, and on bind view holder. The function onCreate needs inflater for list product XML file. The function view holder sets one column (product name) on the recycler view in activity customer XML file. The function on bind view holder will set click listener that will set customer key to extend to customer reservation activity.
Task 4.5: estimated completion is 24 hours
	The product customer reservation activity adapter java file will need to extend to recycler view adapter. The file needs to declare final keys current user. The file needs to declare user item, product item, a list of product items, and context. The constructor will use all the last declared variables. The file will need functions for view holder, onCreate view holder, and on bind view holder. The function onCreate need inflater for list product XML file. The function view holder sets one column (product name) on the recycler view in activity customer reservation XML file. The function on bind view holder will set click listener that will set customer key to extend to customer activity. 
Task 4.6: estimated completion is 2 hours
	The employee activity java file needs to declare recycler view, data source product, product employee activity adapter, product detail employee activity adapter, and a list of product items. The onCreate function will need additional code to use the recycler view on activity launch which is as follows: open data source product, call get all products in a list of product items,  call product employee activity adapter, set adapter to recycler view, and set layout manager for recycler view. The save button's on click listener will need to get all products and refresh to recycler view for the new product added. The product report available button's on click listener will call get all available products and refresh the recycler view with a filtered product list. The product reserved button's on click listener will call get all reserved products and refresh the recycler view with a filtered product list. The product checkout button's on click listener will call get all checked out products and refresh the recycler view with a filtered product list. The product view all recycler details button's on click listener will call get all product and change the recycler view to display three columns of data. 
Task 4.7: estimated completion is 2 hours
	The employee user activity java file needs to declare recycler view and modify user activity adapter. The onCreate function will need additional code to use the recycler view on activity launch which is as follows: open data source customer, call get all customer user data, call modify user activity adapter, set adapter to recycler view, and set layout manager for recycler view. 
Task 4.8: estimated completion is 2 hours
	The customer activity java file needs to declare a list of product items, product customer activity adapter, and recycler view. The onCreate function will need additional code to use the recycler view on activity launch which is as follows: open data source product,  call get all available products, call product customer activity adapter, set adapter to recycler view, and set layout manager for recycler view. The customer report all button's on click listener will need to get all available products and refresh the recycler view with available products. The customer sit in button's on click listener will need to get all sit in products and refresh the recycler view with sit in type products. The customer sit on button's on click listener will need to get all sit on products and refresh the recycler view with sit on type products. 
Task 4.9: estimated completion is 2 hours
	The customer reservation activity java file needs to declare product customer reservation activity adapter and recycler view. The onCreate function will need additional code to use the recycler view on activity launch which is as follows: open data source product, call get all local reserved products in a list of product items, call product customer reservation activity adapter, set adapter to recycler view, and set layout manager for recycler view.
Task 4.10: estimated completion is 4 hours
	The activity report bug XML file will have a text view next to text view for "To:" and a place holder for the companies’ email. The next line will have a text view next to edit text for "Subject:" and a place for user input. The line will have a text view for "Body:". The next line is a multi-line edit text for user input. The last line will have two buttons labeled send and cancel respectively. 
Task 4.11: estimated completion is 4 hours
	The report bug activity java file will declare two buttons, two edit texts, one text view, and keys for current user data. The file will need a function called send mail. Send mail will set text view and edit text to string. Send mail will create new intent to send this information to the device mail application. The onCreate function will need additional code which is as follows: get intent from previous activity, create new user item for current user data, set XML components to local variables, create send button's on click listener, and create cancel button's on click listener. The send button's on click listener will need additional code which is as follows: call send mail function, check current user type, set extension of current user's data, and launch either employee activity or customer activity based on the user's type. The cancel button's on click listener will check user type, set extension of the current user's data, and launch either employee activity or customer activity based on the user's type.
Task 4.12: estimated completion is 2 hours
	The activity employee XML file will need to add one button labeled contact us. The button will be located between the customer data and log out buttons. 
Task 4.13: estimated completion is 2 hours
	The employee activity java file will need to declare a button for report bug. The onCreate function will need the new button attached by id to the XML component, the button will need a click listener, set extension of the current user's data, and launch report bug activity.
Task 4.14: estimated completion is 2 hours
The activity customer XML file will need to add one button labeled contact us. The button will be located at the top left beside the cart and log out buttons. 
Task 4.15: estimated completion is 2 hours
	The customer activity java file will need to declare a button for report bug. The onCreate function will need the new button attached by id to the XML component, the button will need a click listener, set extension of the current user's data, and launch report bug activity. 
Task 4.16: estimated completion is 72 hours
	The deliverable will need to be tested against acceptance criteria. The deliverable will test all recycler views created in the fourth deliverable’s tasks. The test data will be compared will the acceptance criteria. The project will be adjusted if the functionality meet acceptance. The test phase will need to test the report bug activity java file created, the activity report bug XML file, and new buttons that navigate to activity. The test result will be compared with the acceptance criteria and will be adjust if necessary. The deliver is complete when the tests all return expected values for acceptance criteria. 

Acceptance Criteria and Key Performance Indicators
Deliverable
	The deliverable will include all XML files, java activity files, and all associated XML components. The team will need to fully design all the XML files that are associated with an activity and XML files that will be used for the recycler view with all the components. The project manager requested the XML files all use lite blue background and constraint layout. wanted on all the XML files. The java activity files will need to be designed to change intent and be linked with XML components. The java files need to be a completed as documented in the design phase of the agile model. The java files will be tasks will be discussed from each file. The tasks are divided into files created, design layout testing, and testing phase.
Acceptance Criteria
	The application must be able to launch. The XML design needs to look professional, simple, and uniform. The testing team will be using tools to check to all activities are responding to commands as expect on the desired device and emulated devices. The user and product names edit text fields working constraints. 
Key Performance Indicators
	The tasks are divided into coding requirement for a specific java or XML file. The team has a specialist working exclusively on the XML files. The specialist has ten XML files to complete and will start their vacation in eight days. Each XML file is estimated to take three hours to complete with eight days the design specialist will have extra time to maximize the project’s exhibition value. The specialist will set XML design, test, refine concept, and repeat. The other three team members will split time between coding and testing. The seven remaining java files each are estimated to take 3 hours. The KPI will be determined by progress of the design and in this case finishing early will not benefit the project quality. The deliverable’s acceptance will be late because of the testing that will take an estimated 120 hours. The testing needs to start as soon as possible to keep the deliverable on schedule.
Deliverable
	The deliverable will include designing the database that will store company data including creation of SQLite database, the java functions, and creating the database with a table for user data and a table for product data. The team will need to build the java files for creating the database helper to connect to SQLite, a product table for the database, a user table for database, a product item that will extend to the main application, a user item that will extend to the main application, a product data source to connect the product item to the product table, and a user data source to connect the user item to the product table. The tasks will be divided into java files and the testing process.
Acceptance Criteria
	The application will test all the functions of the data source product and data source user with programmer created tools. The SQLite database tests will examine each data source function. The function will be tested can only be approved if input data matches expected data. All functions must pass to meet acceptance criteria. 
Key Performance Indicators
	The deliverable is divided into seven tasks and testing tools that will be necessary for acceptance. Each task is a java file that builds a portion of overall project ability to communicate with the database and is estimated to take 288 hours. The team will be required to setup the database helper, database tables, user table, product table, data source user, and data source product. The daily meetings will deliver progress reports on development. Testing the second deliverable is expected to take 216 hours. The project will be considered a failure if the inventory management system is not correctly recording data and very essential. The project manager will need be sure team members are not roadblocked and start testing as soon as possible. 
Deliverable
	The deliverable will give the activities access to database, updating click listeners, and supporting functions. The development team will need to connect activities to database access, passing log in data between activities, setting on click listeners, creating a timestamp for date products are created, and setting user entries on application launch. The development team will be working on main activity, employee activity, employee product edit activity, employee user activity, employee user edit activity, customer activity, and customer reservation activity. The tasks are divided into each file that needs to be updated and testing process.
Acceptance Criteria
 	The application will need to test all buttons connected to the database, checking database queries for accuracy, and testing the data recorded versus expected. All functions that access the database to save, modify, and delete must be working as expected. The timestamp added to every product on creation must be tested in various conditions. The edit text fields need the constraints tested to prevent any blank names and username duplicates being stored in the database. 
Key Performance Indicators
	The three deliverable has seven tasks that are activity java files. The seven tasks each have a development duration of four hours. The testing phase will require simple testing tools to be created and will take 72 hours to complete. The testing phase will require the most time and the start date of the testing will best determine the deliverables completion date. 
Deliverable
	The deliverable will include the creation the five java files that adapt recycler views and update the activities within recycler views to receive recycler data. The sponsor requested a change request for customer and employee user to have an activity that will let the user email the administration. The development team will need to make a recycler view adapter for each activity with a recycler view. The team will need to make an extra adapter to allow employee to view product details in the recycler view. The team will need to update all the activities with recycler views. The change requested will require the creation of another activity which will include a new java file, a new XML file, and will need to add access points to change request. The tasks will be divided into files that require code changes and the testing process.
Acceptance Criteria
 	The application will need to test all buttons connected to the database, checking database queries for accuracy, and testing the data recorded versus expected data. All functions that access the database to save, modify, and delete must be working as expected. The timestamp added to every product on creation must be tested. The edit text fields need the constraints tested to prevent any blank names and username duplicates being stored to the database.\
Key Performance Indicators
	The fourth deliverable has thirteen tasks. Five tasks are to create recycler view adapter java files. Four tasks are to add code to activities with recycler views. Two tasks are to create another activity to email the administrator. Two tasks are to add buttons with the label contact us and code associated to the employ main activity and customer main activity. The development of recycler view code was estimated at a total 120 hours. The scope added four more tasks that still need some planning, the design specialist is not available, and the team member seem to be avoiding the tasks. The new tasks development provided estimate is two days. The testing phase of the new tasks is estimated at 72 hours.

Final Acceptance Criteria
	The project must be tested against final acceptance criteria. The application needs to be installed and tested on CD Kayaks’ mobile phone. The project will need to check database after launching and create two users if user table has less than two entries. The project must have constraints to protect name entry with immediate correction, check email format, prevent duplicate usernames, prevent blank name fields being stored to the database, and preventing unauthorized access. The employee user can add, modify, and delete product data from the database. The employee user can view, add, modify, and delete customer user data from the database.  The project has a simple access to contact company through email for any user. The employ user can filter recycler view by reservation status and display products with more details in the recycler view. The customer user’s recycler view will only get display available products and products the customer reserved. The customer user will be able to reserve and release products. The customer user will be able to filter recycler view by product type. The project must have consistent design and be easy to learn. The project’s data must be reliable, quick to update, and easy to read. 

Final Key Performance Indicators
	The project final test phase will have the full team attention. The project final test is estimated to be 72 hours of work. The testing phases for the project has been extensive which greatly reduced the amount of errors detected in the planned tests for the completed project. 

Cost Estimates
	The project initial time estimates were derived from key deliverables and tasks. The project would have will a goal of completing in three months, but the budget could allow for two extra weeks at the expense of the bottom line. The project team included project manager, design expert, and three team members. The design expert will leave the project after designing the XML files. The three team members can work on planning, design, development, and testing phases. The team will have a meeting room, computers with all software for the project, and the device for testing. All additional testing will be done on emulators.
Cost Estimate Table
Deliverable.Task (#.#)Resource       (job title)Work Effort (hour)Rate                (dollar per hour)Total Cost (dollar)1.1Design Expert3 2006001.2Design Expert3 2006001.3Design Expert3 2006001.4Design Expert3 2006001.5Design Expert3 2006001.6Design Expert3 2006001.7Design Expert3 2006001.8Design Expert3 2006001.9Design Expert1 2006001.10Design Expert12006001.11Team Member11501501.12Team Member11501501.13Team Member11501501.14Team Member11501501.15Team Member11501501.16Design Expert3420068001.17Team Member120150180002.1Team Member2815042002.2Team Member3515052502.3Team Member3515052502.4Team Member3515052502.5Team Member3515052502.6Team Member6015090002.7Team Member6015090002.8Team Member216150324003.1Team Member41506003.2Team Member41506003.3Team Member41506003.4Team Member41506003.5Team Member41506003.6Team Member41506003.7Team Member41506003.8Team Member72150108004.1Team Member2415036004.2Team Member2415036004.3Team Member2415036004.4Team Member2415036004.5Team Member2415036004.6Team Member21503004.7Team Member21503004.8Team Member21503004.9Team Member21503004.10Team Member41506004.11Team Member41506004.12Team Member21503004.13Team Member21503004.14Team Member21503004.15Team Member21503004.16Team Member7215010800Final TestingTeam Member7215010800Total1,077165,350
Actual Cost
	The project team’s actual tasks hours are 1024. The team members tasks hours are 960. The design specialist tasks hours are 64. The total labor cost of $156,800. This is just the cost during development and testing. It does not include scope, planning, and idle time wait for final acceptance. 
Milestones
	The milestone described in detail with duration, dependencies, and member assigned to each task. The scope statement included the project manager, the three team members, and the design special. The sponsor requested that the scope, plan phase, and diagram of the project must be explorer full before starting the development phase. The estimated time was 15 days to complete. The actual time was 14 days. The work completed during this milestone was a full scope, deliverables, tasks, key performance indicators, time and cost estimates, and design diagram. The scope needed to be accepted and agreed on before the project could advance. 
	The first deliverable includes 16 development tasks and a testing task. The estimated time was 10 days to complete with 185 tasks hours. The actual time was 14 days with 216 task hours spent. Nine tasks were assigned to the design specialist which include tasks 1 through 8 and 16 which took 64 hours. The design specialist left the team after the tasks were completed. The three members took 72 hours to complete tasks 9 through 15. The one team member started testing phase. The other two started on second deliverable tasks. The first and second deliverables could be built and tested without any dependency on the other. The last tasks testing took 80 hours. The first deliverable completed 4 days later than expected.
	The second deliverable includes 7 development tasks and a testing task. The estimated time was 15 days to complete with 479 task hours. The actual time was 27 days with 368 task hours spent. The two team members that started tasks early completed the first 5 tasks by the time the third team member joined. The third member started the testing phase immediately. The two members worked on the last two development tasks. The seven development tasks took 240 task hours to complete. One team member started the third deliverable tasks and the other helped with the second testing. The test phase was done by the team members took 248 task hours to complete. The second deliverable needed to be fully developed before the third tasks could start and the second testing needed to be complete before testing the third.
	The third deliverable includes 7 development tasks and a testing task. The estimated time was 4 days to complete with 100 task hours. The actual time was 16 days with 186 task hours spent. One team member started the tasks before the testing was completed on the second deliverable. The individual spent 96 tasks hours alone by completed all the development tasks starting on the testing task. When, the second deliverable was accepted the one team member was added to the third deliverable for testing, one team member leaves the third deliverable to start fourth deliverable tasks, and the last team member to start the fourth deliverable tasks. The testing phase took the 40 tasks hours to complete. The third deliverable needed to be fully tested before the fourth deliverable could be tested. 
	The fourth deliverable includes 15 development tasks and a testing task. The estimated time was 9 days to complete with 240 task hours. The actual time was 8 days with 182 task hours spent. The two team members start on the first 5 tasks which will take the largest amount of task hours. The two team members complete 64 task hours before the third deliverable is accepted and the fourth member starts working on development tasks. The three team members complete the development tasks with 48 more tasks hours. Two team members remain for the testing task and one team members starts preparing for the final acceptance testing. The two team members complete the testing phase with 48 tasks hours. The fourth deliverable must be accepted before the testing of the final project can begin testing. 
	The final acceptance is just testing and measuring the result against the final acceptance criteria and customer requirements. The estimated time was 5 days to complete with 72 task hours. The actual time was 5 days with 72 task hours spent. The team member that left the fourth deliverable before testing finished was able to make a testing chart to assist with final testing phase. The final acceptance is not dependent on other processes, but if the project does not meet with requirements. The team will need to submit a change request, adjust the project code, and restart testing.
	The project sign-off is making the sure CD Kayaks, the project sponsor, and any other stakeholders agreed with he projects conclusion. The estimated and actual time was 3 days. The project sent out the sign-off documents and waited for the response. The team was reviewing documentation and updating were needed while the sign-off request was being processed. The project manager released the team when the sign-off was accepted and handed off the project to CD Kayaks. 
	The project documentation is a report on the project that will distributed and archived as required that includes closing contracts, all documents created prior, lessons learned review, costs analysis, project schedule, and project sign-off documents.  The estimated and actual time was 5 days. The project team had reviewed and completed historical documents during sign-off idle time. The contract would be completed after CD Kayaks received the project source code and a user manual that was mailed. The summary documentation was completed, and the complete project document was submitted as the organization requires. 
Milestone Table
MilestoneScheduled Start DateActual Start DateScheduled Completion DateActual Completion DateScope Statement03/16/202003/16/202004/03/202004/02/20201st Deliverable04/06/202004/07/202004/17/202004/24/20202nd Deliverable04/20/202004/13/202005/08/202005/19/20203rd Deliverable05/11/202005/01/202005/14/202005/25/20204th Deliverable05/15/202005/19/202005/28/202005/29/2020Final Acceptance05/29/202005/27/202006/04/202006/02/2020Project Sign-off06/05/202006/03/202006/09/202006/05/2020Project Documentation06/10/202006/08/202006/16/202006/12/2020
Project Notable Events Timeline Description
[Monday, 03/02/2020]
	The software development organization has a meeting with CD Kayaks.  The meeting is to review the project request to ensure the request is within the capabilities of the organization and to start setting business expectations. The project request includes a written document describing the project goals and justification.
[Monday, 03/09/2020]
	The software development organization selects the project manager. The project manager reviews the document provided and starts creating the high-level scope definition that sets objectives, high-level deliverables, and the purpose of the project. 
[Thursday, 03/12/2020]
	The project manager scheduled a meeting with CD Kayaks to clarify the problems the software is attempting to solve and the requirements of the project. The meeting yielded a refined project request and CD Kayaks project requirements listed. The project manager can now start to develop the project's scope.  The plan is to start scope meetings next week. 
[Monday, 03/16/2020]
	The project team started working on creating a full project scope. The project manager will use agile model, but wants the scope as detailed as possible with the full team meeting for three weeks to plan development. The first document was to create a project objectives document which was derived mostly from customer requirements. 
[Tuesday, 03/17/2020]
	The project team started working on the four outlined deliverables. The team wanted to ensure tasks were detailed for each deliverable.
[Monday, 03/30/2020]
	The project team finished deliverables, tasks, key performance indicators, time and cost estimates, and acceptance criteria documents. The team had three day to refine model, examine possible risks, and double check work.
[Thursday, 04/02/2020]
	The project manager submitted the scope statement to sponsor and customer.
[Tuesday, 04/07/2020]
	The project team starts development process of the first deliverable.
[Monday, 04/13/2020]
	Three team members have finished first deliverable tasks. One team member will start developing the testing tools. The other two will start on second deliverable. 
[Friday, 04/17/2020]
	The project development of the first deliverable ends. The team design specialist goes on vacation and the team has three coders left. One team member will remain to test the first deliverable against acceptance criteria. The other two are still working on second deliverable tasks. 
[Friday, 04/24/2020]
	The first deliverable was fully tested and met acceptance criteria. The team member who was testing the first deliverable started coding test cases for second deliverable.
[Friday, 05/01/2020]
	The second deliverable development was completed, and the testing phase is ready to begin. One team member moves to development of the third deliverable. The other team member will assist with second deliverable testing phase.
[Wednesday, 05/06/2020]
	The third deliverable development phase was completed, and the testing tools were created for the testing phase. The team member moved to testing the second deliverable.
[Tuesday, 05/19/2020]
	The second deliverable was fully tested and met acceptance criteria. One team member started the testing phase for the third deliverable. The other two members started the development phase for the fourth deliverable. 
[Monday, 05/25/2020]
	The third deliverable was fully tested and met acceptance criteria. The team member moved to the fourth deliverable.
[Wednesday, 05/27/2020]
	The fourth deliverable development phase was completed, and the testing phase began. Two team members remained for the fourth's testing phase. The other team member start prepping for the final acceptance criteria. 
[Friday, 05/29/2020]
	The fourth deliverable was fully tested and met acceptance criteria. The whole team moved to the final acceptance criteria
[Tuesday, 06/02/2020]
	The final acceptance criteria specifics were completely met, and the final document was completed. The project team was waiting for a response to get final sign-off. 
[Thursday, 06/05/2020]
	The project was accepted and handed off to CD Kayaks. The project manager released all the team members from project duties. The project manager was working on the closing report documents. 
[Wednesday, 06/12/2020]
	The product manager completed contract by sending the customer a user manual and transferring application backup data. The project manager collected all project document, make a lesson learn document which is a reflection on the way the project process could be improved upon reiteration, and writing the final project close report. The product manager reviewed the project documents to ensure the information is correct and complete, and archived the project documents in the proper place.

Implementation Plan
Implementation
	CD Kayaks planned to do a soft launch of the software using both methods to live test without removing the current process. The implementation starts with the software being used to store customer records by searching invoices of all kayaks that are still checked out and reserved for tomorrow. The entire product inventory must be entered setting all reservation types to available. The employee must login with each customer credentials and for every kayak checked out by that customer create a reservation. The employee must log back into employee account and update all the reserved kayaks to checked out. This action sets the checked-out kayaks with the customer account. The employee used the app to login as each customer credentials and for every kayak reserved by that customer create a reservation. This set all product records to match the inventory. The employee does an audit comparing the product database and the actual inventory. The database records and the actual inventory are completely synchronized. The app is ready to be tested. CD Kayaks assigns two employees to handle rental services to test the app and handle the rental requests through typical means. The employee using the app records each rental transaction throughout the day. 
	Customers get the reserved kayaks in the morning and each kayak leaving will need to be changed to checked out. The employee uses the employee login credentials to select the reserved kayak, check the customer name matches reservation, and update the record to checked out. Customers requesting rental reservation services must be a customer in database or record must be created. Customer requests for rental services are managed by logging in with the customer’s login credentials to display available kayaks, make reservation, and release reservation. Customers returning kayaks are managed by using employee login credentials to find each kayak in the checked-out list, selecting the kayak, checking the customer account associated is correct, and changing status to available. 
	The employee using the app to complete the typical customer requests. The business day ended without any noticeable issues. The app processed customer request at the same speed or bit faster than the employee using regular process. The employee needs to examine the app data against the paper list of reservations and the local inventory. The company records and inventory matched the inventory management system. The employee found the records in the app were much easier to read than the paper list. 
	CD Kayaks continue to test the accuracy of the app for the next month. The results were the app would save time, increase mobile, and reduce inaccuracies. The app phased out the old system with a few benefits and nothing lost. The company realized that the app has no way to sharing inventory and customer records which was a major oversight. CD Kayaks first software development project resolved all the issues in the rental process and exceeded expectations.  
      
Verifying and Validating Application Versus Customer Expectations
Verifying and Validating
	The project will be extensivity tested on each of the four deliverables and the final project acceptance. The four deliverables will all be tested and adjusted if needed to meet or exceed customer requirements. The customer expected a project that would handle all actions needed for rental service processing and increase inventory accuracy. The project would need to be tested to handle all transactions expected and unexpected as expansive as time would allow. 
	The project team would need to create testing function during the early parts of testing to investigate the components before integration. During the second deliverable, the SQLite database was functioning, but disconnected from activities. Providing the best possible time to isolate functionality but causing testing time to increase. The testing would require testing tools built each test proposed. The team was small but testing and request change needed to be done by a different team member. 
	The project’s final acceptance testing the completed software. Scenarios were run to examine input, output, and expectation data. Functional tests on every component and combination of actions that would not be expected. Acceptance testing to measure the customer requirement against the software. The reliable, accurate results of functionality and acceptance tests across the board ensured the project would succeed in any action. The project was fully verified meeting specification, requirements, and acceptance criteria as agreed upon.

Requirements B: The Application Developed in Android Studio 
	The Android Studio project is attached in a zipped file. The android emulator used for testing was Nexus 5X API29. The program has a required minimum SDK of 27. The program opens to a login activity. The usernames are “ted” and “bear” for employee access and customer access, respectively. 
Requirements C: Documentation of the Application
Class Diagram 
Class details
	The class diagram is will provide an overview of the relationships of the database file in the project subfolder model. The class diagrams box in the class name, attributes, and methods for the class. The diagram box at the top contains the class name is followed by horizontal line. The attributes are detailed next with the first character denote the attributes access modifiers which will be shown in the class diagram relationship outline. The attributes are defined as data declared within the class but declared data within internal functions. After the access modifier character, is the object’s assigned name followed by a couple spaces and ends with a semicolon before the data type. The diagram box has another horizontal line and followed by the method data. The method section starts with the access modifier character following by the first method’s name and in parentheses the method’s input data type or nothing if the method does require object input. The last part on the method will be some blank spaces followed a  semicolon next to the method’s output data type name. The seven class diagrams of database classes with full class details : 
UserModelTable+USER_TABLE                        :String+COLUMN_USER_ID              :String+COLUMN_USER_NAME     :String+COLUMN_USER_ACCESS       :String+COLUMN_USER_EMAIL         :String+ALL_USER_COLUMNS              :String[]+SQL_CREATE_USERS               :String+SQL_USER_DELETE            :String
ProductModelTable+PRODUCT_TABLE                                                    :String+COLUMN_PRODUCT_ID                                       :String+COLUMN_PRODUCT_NAME                                :String+COLUMN_PRODUCT_DATE                                 :String+COLUMN_PRODUCT_TYPE                                   :String+COLUMN_PRODUCT_USER_CREATED                :String+COLUMN_PRODUCT_RESERVED                         :String+COLUMN_PRODUCT_USER_RESERVATION       :String+ALL_PRODUCT_COLUMNS                                   :String[]+SQL_CREATE_PRODUCTS                                      :String+SQL_PRODUCT_DELETE                                        :String
DataBaseHelper+DB_FILE_NAME                                 :String+DB_VERSION                                     :Int+onCreate(SQLiteDatabase)                   :void+onUpgrade(SQLiteDatabase , int, int)  :void
DataSourceUser-mContext                                           :void+open()                                                :void+close()                                                :void+deleteAllUsers()                               :void+createEmployee()                                :void+createCustomer()                                 :void+addNewCustomer(UserItem)              :void+updateCustomer(UserItem)                 :void+userDatabaseUpdateEmail(UserItem) :String+testUniqueCustomer(String)              :boolean+getAllUserDataToast()                       :void+getAllCustomerUserData()      :List<UserItem>+userIdToName(Integer)                    :String+getAuthorizedUserData(String)        :UserItem-cursorToUser(Cursor cursor)             :UserItem+getUserItemsCount()                         :long
DataSourceProduct-mContext              :Context+open()              :void+close()              :voidcreateProduct(ProductItem)              :void+productDatabaseUpdateNameType(ProductItem)             :void+reserveKayak(ProductItem)             :void+deleteProduct(Integer)             :void+getAllProducts()             :List<ProductItem>+getAllLocalReservedProducts(Integer)             :List<ProductItem>+getAllCheckedOutProducts()             :List<ProductItem>+getAllReservedProducts()             :List<ProductItem>+getAllAvailableProducts():List<ProductItem>+getAllSitOnProducts(Integer)             :List<ProductItem>+getAllSitInProducts(Integer)             :List<ProductItem>-cursorToProduct(Cursor)             :ProductItem
UserItem-userId             :Integer-userName             :String-userAccess             :Integer-userEmail             :String+getUserId()             :Integer+setUserId(Integer)             :void+getUserName()             :String+setUserName(String)             :void+getUserAccess()             :Integer+setUserAccess(Integer)             :Integer+getUserEmail()            :String+setUserEmail(String)             :void+toUserValues()             :ContentValues+toString()             :String+describeContents()             :Integer+writeToParcel(Parcel,int)             :void
ProductItem-productId             :Integer-productName            :String-productDate             :String-productType             :Integer-productCreatedBy             :String-productReversed             :Integer-productUserReservation             :Integer+toString()             :String+toValues()             :ContentValues+getProductId()            :Integer+setProductId(Integer)             :void+getProductName()             :String+setProductName(String)             :void+getProductDate()             :String+setProductDate(String)             :void+getProductType()             :Integer+setProductType(Integer)             :void+getProductCreatedBy()             :String+setProductCreatedBy(String)             :void+getProductReversed()             :Integer+setProductReversed(Integer)             :void+getProductUserReservation()             :Integer+setProductUserReservation(Integer)             :void+describeContents()             :Integer+writeToParcel(Parcel, Integer)             :void
Class Relationship Diagram
	The diagram will display the seven classes connected by a line that show associated classes. The line will have a description of the relationship between the classes called the label. The label will be preceded by an arrow that points toward the class being requested. All association relationships must have a multiplicity notation to describe the amount of interaction between the class in each direction. The multiplicity key is included in the class relationship diagram. The relationship association has been categorized by type which include aggregation, composition, inheritance, and realization. The database class associated using the realization relationship type exclusively. The dependency relationship is 
“a semantic connection between dependent and independent model elements. It exists between two elements if changes to the other (the client or source). This association is unidirectional. A dependency is displayed as a dashed line with an open arrow that points from the client to the supplier” (Class Diagram).
The classes have six realization relationships that need to describe to provide a better understanding the interactions.
	The relationship diagram will have a label to give a short description of inaction between the classes. The relationship between DataSourceUser and UserItem is completely one sided. The multiplicity will be one or more for DataSourceUser and zero or more for UserItem, but the class will never access the DataSourceUser class.  The DataSourceUser class contains functions take access the user table of the database to make changes and query lists of user data. The UserItem class creates a new object to store user table records and assist with take SQLite user data into a manageable form. The DataSourceUser needs to access the UserItem object data type and functions in almost every method in the class to access the user table of the database. The relationship  between DataSourceProduct and ProductItem is completely one sided. The multiplicity will be one or more for DataSourceProduct and zero or more for ProductItem, but the class will never access the DataSourceProduct class. The DataSourceProduct needs to access the ProductItem object data type and functions in almost every method in the class to access the product table of the database. The relationship between DataBaseHelper and UserModelTable is completely one sided. The multiplicity will be one or more for DataBaseHelper and zero or more for UserModelTable, but the class will never access the DataBaseHelper class. The DataBaseHelper can create, update SQLite database, and stores the database credentials needed for connecting to the database and getting a writeable database. The UserModelTable stores the user table of database records and has SQLite statements for creating and deleting the user table. The DataBaseHelper needs to access the UserModelTable to reference SQLite statements to create or delete user table from the database. The relation between DataBaseHelper and ProductModelTable is completely one sided. The multiplicity will be one or more for DataBaseHelper and zero or more for ProductModelTable, but the class will never access the DataBaseHelper class. The ProductModelTable store the product table of database records and has SQLite statements for creating and deleting the product table. The DataBaseHelper needs to access the ProductModelTable to reference SQLite statements to create or delete product table from the database. The relationship between DataSourceUser and DataBaseHelper is completely one sided. The multiplicity will be one or more for DataBaseHelper and zero or more for ProductModelTable, but the class will never access the DataBaseHelper class. The DataSourceUser will request the database credentials from the DataBaseHelper class. The DataSourceUser will need to make this request each time the project needs to access the user table of the database. The relationship between DataSourceProduct and DataBaseHelper is completely one sided. The multiplicity will one or more for DataSourceProduct and zero or more for DataBaseHelper, but the class will never access DataSourceProduct class. The DataSourceProduct will request the database credentials from the DataBaseHelper class. The DataSourceProduct will need to make this request each time the project needs to access the product table of the database. That is a full description of the class diagram relationships. .

Design Diagram
	The project design diagram will show the XML pages basic layout and showing how navigation will connect the activities. The project has eleven XML files, but three of the XML files are set within another XML file for the recycler view. The project has two separate authorization level by customer or employee user. The design diagram will need to be two layouts with the design the customer can access and the layout the employee can access. The XML file will all have a title, a background color, and constrained layout. The account can only be switched by logging off and entering different credentials. The files will be show all components types in their approximate locations and navigation will be represented by a line with the component name that control activity change.
Design Diagram: customer view 

Design Diagram: product view 



A Test Plan with Results
	A test for the app is to see if a customer record will update email address from login screen. The first step is to login as the employee user with “ted” credentials. The employee main activity will open and select the customer button. The employee customer activity will open and input into fields “hello” as username and “hello@world.com” as email address. Select the save button and log out. The test will input “hello” as username and “bye@bye.com” as email address. The expected result will be in the customer list the username “hello” will have “bye@bye.com” as an email address. The test results show the user email address was updated in the database as expected.   


User Guide for Using the Application
	The app will be on your phone as requested. The process to troubleshoot the app for deletion, new device, and any other issue. The app must be reinstalled with app source data through Android Studio as follows: Connect your device to your device to Android Studio development machine via a USB cable. Open the android device’s setting and select about phone. Scroll to “Build number” and tap seven times. Go back one screen, select “Developer options”, and enable “USB debugging” (Run Your App). Run Android Studio application and go to file menu. open the CD Kayaks project. Go to tool menu and open “AVD manager”. Select the device connected by USB. Go to run menu and select “run app”. The app will be installed on and launched. The app will include initial launch data and will be ready to be used.
	Any issues that are not resolved through a previous process will need directed to CD Kayaks management team for resolution. 

User Guide for Running the Application for Employees
	The device will have an app installed for CD Kayaks rentals. If the app is missing, please refer to the using the application guide. The application will allow employees to update product records, update customer records, send the administrator emails, set customer reservations, and view product and customer data. The application will be a tool for rental inventory management, customer records maintenance, and for managing customer rental requests.
	The app will launch to a login screen. The app will have fields for user input. The app is specific on some fields and will display messages to assist with proper usage. The user will need to use the employee login to access inventory management system and customer records. The employee login will have a default value of “ted” and the customer login will have a default value of “bear”. The login page will include email address field that is used update existing data and will be ignored if left blank. 
	The employee main page will display products records, button to filter list, have a form for create new products, and navigation buttons. The products in the list can be modify when selected. The products can be updated, deleted, or discarded. The employee main page can navigate to customer records which will be displayed in a list, created by using the form, and navigation buttons. The customer records can be modified by tapping the list. The employee main page can open contact us form that will be sent by using the selected mail app. The employee can log out and return to the login screen.
	The customer records list in the employee will show all customer username that can be used at the login screen. Using the customer name at the login screen will open a view designed only for that customer. The app will show all products the customer can reserve, contact us button, log off button, cart button, and filter options for the list by product type. The product list can be selected to reserve product and display a list of all reserved products associated with the customer login. The reserved list can be selected again to remove product or the navigation buttons. 
	That is a full list of the app functions and any additional question should be directed to app administrator. 

Requirements D: Works Cited
Works Cited
Run Your App  :   Android Developers. developer.android.com/training/basics/firstapp/running-app. 

“Class Diagram.” Wikipedia, Wikimedia Foundation, 11 Sept. 2020, en.wikipedia.org/wiki/Class_diagram. 
“Class Diagram.” Wikipedia, Wikimedia Foundation, 11 Sept. 2020, en.wikipedia.org/wiki/Class_diagram. 

1


